//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Player control"",
            ""id"": ""858a1690-06d0-498a-8fcb-15932a44f95f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""16045dc8-5f9e-427d-8ee4-1b88138d3556"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""bc938159-f353-43ad-a1f7-5492e7835396"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c9e97e40-90a2-4aa4-b165-8abe25ff9bc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4a5f2ef-8a7b-45f3-8ecc-a002f5783895"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b3e2889-25c4-4109-ad2a-4a7834aa4c0d"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5a9a7eb-0cd2-4356-b8c9-f18e97fed2b4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b366c9ac-b224-491e-8cb5-1b4c717568b2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player control
        m_Playercontrol = asset.FindActionMap("Player control", throwIfNotFound: true);
        m_Playercontrol_Move = m_Playercontrol.FindAction("Move", throwIfNotFound: true);
        m_Playercontrol_Look = m_Playercontrol.FindAction("Look", throwIfNotFound: true);
        m_Playercontrol_Interact = m_Playercontrol.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player control
    private readonly InputActionMap m_Playercontrol;
    private IPlayercontrolActions m_PlayercontrolActionsCallbackInterface;
    private readonly InputAction m_Playercontrol_Move;
    private readonly InputAction m_Playercontrol_Look;
    private readonly InputAction m_Playercontrol_Interact;
    public struct PlayercontrolActions
    {
        private @InputActions m_Wrapper;
        public PlayercontrolActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Playercontrol_Move;
        public InputAction @Look => m_Wrapper.m_Playercontrol_Look;
        public InputAction @Interact => m_Wrapper.m_Playercontrol_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Playercontrol; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayercontrolActions set) { return set.Get(); }
        public void SetCallbacks(IPlayercontrolActions instance)
        {
            if (m_Wrapper.m_PlayercontrolActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnLook;
                @Interact.started -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayercontrolActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayercontrolActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayercontrolActions @Playercontrol => new PlayercontrolActions(this);
    public interface IPlayercontrolActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
